#!/bin/sh

# ASL_REG: Registration for ASL data
#
# Michael Chappell & Brad MacIntosh, FMRIB Image Analysis & Physics Groups
#
# Copyright (c) 2008-2016 University of Oxford
#
# SHCOPYRIGHT

Usage() {
    echo "ASL_REG"
    echo "Version: 2.0"
    echo "Registration for ASL data"
    echo ""
    echo "Usage (optional parameters in {}):"
    echo " -i         : specify input image - e.g. perfusion-weighted image"
    echo " {-o}       : specify output directory - {default: pwd}"
    echo " -s         : specify structural brain image - wholehead"
    echo " {--sbet}   : specify structural brain image - brain extracted"
    echo " Extra 'final' registration refinement (optional parameters in {}):"
    echo "  -c            : specify an ASL control/calibration image for initial registration - brain extracted"
    echo "  {-m}          : specify a brain mask for brain extraction of the input image"
    echo "  {--tissseg}   : specify tissue segmenation image for bbr (in structural image space)"
    echo "  {--finalonly} : only run the 'final' registration step"
    echo " Extended options (all optional):"
#    echo " -t         : specify structural-->standard brain transformation matrix"
    echo " -r         : specify extra low resolution structural image - brain extracted"
    echo " --imat     : specify initial transformation matrix for input to structural image"
    echo "                if supplying a low res. structural this matrix should refer to that image"
    echo " --inweight : specify weights for input image"
    echo "                same functionality as the flirt -inweight option"
    echo ""
}

#deal with options

if [ -z $1 ]; then
   Usage
   exit 1
fi

until [ -z $1 ]; do
    case $1 in
	-o) outflag=1 outdir=$2
	    shift;;
	-i) inflag=1 infile=$2
	    shift;;
	-s) strucflag=1 struc=$2
	    shift;;
	-m) mask=$2
	    shift;;
#	-t) transflag=1 trans=$2
#	    shift;;
	-r) lowstrucflag=1 lowstruc=$2
	    shift;;
	--imat) init=1 inmat=$2
		shift;;
	--inweight) inweight=$2
		    shift;;
	-c) cflag=1 cfile=$2
	    shift;;
	--sbet) sbet=$2
		shift;;
	--tissseg) tissseg=$2
		   shift;;
	--finalonly) finalonly=1 #only run the final BBR part
		    ;;
	--mainonly) mainonly=1 # only run the first flirt part (to get inital alignment)
	    ;;
	--flirtsch) flirtsch=$2
	    shift;;
	--debug) debug=1
	    ;;
	*)  Usage
	    echo "Error! Unrecognised option on command line: $1"
	    echo ""
	    exit 1;;
    esac
    shift
done

echo "ASL_REG"
echo "Input file is: $infile"

# set the output name here if not specified
if [ -z $outflag ]; then
    echo "Ouput being placed in input directory"
    outdir=`pwd`;
fi

# Start by looking for the output directory (and create if need be)
if [ ! -d $outdir ]; then
  echo "Creating output directory"
  mkdir $outdir;
fi

# make a temporary directory to work in - delete at end
tmpbase=`$FSLDIR/bin/tmpnam`
if [ -z $debug ]; then
    tempdir=${tmpbase}_asl_reg
else
    tempdir=$outdir/tmp_asl_reg #make local temp directory and do not delete at end
fi
mkdir $tempdir

#deal with init matrix option
if [ ! -z $init ]; then
    inittext="-init $inmat"
    epi_inittext="--init=$inmat"
fi

# deal with weighting applied to input image
if [ ! -z $inweight ]; then
    weightinstr="-inweight $inweight"
fi

# set the DOF - we will routinely use 6
DOF=6;

# optional flirt schedule for main transformation of asl to structural
if [ -z $flirtsch ]; then
    flirtsch=$FSLDIR/etc/flirtsch/simple3D.sch
else
    echo "Using supplied FLIRT schedule"
fi

# check if a supplementary image has been provded on which to base (inital) registration
if [ -z $cflag ]; then
    cfile=$infile
fi

# BET the structural image if required
if [ -z $sbet ]; then
    echo "Running BET on structural image"
    $FSLDIR/bin/bet $struc $tempdir/struc_brain
    sbet=$tempdir/struc_brain
fi

# do the MAIN registration run - use the supplementary image for this if available
if [ -z $finalonly ]; then
    echo "Registration MAIN stage (FLIRT)"
    if [ -z $lowstrucflag ]; then
	#Step1: 3DOF translation only transformation
	$FSLDIR/bin/flirt -in $cfile -ref $sbet -schedule $FSLDIR/etc/flirtsch/xyztrans.sch -omat $tempdir/low2high1.mat -out $tempdir/low2hig1 $inittext $weigthinstr
	#step2: 6DOF transformation with small search region
	$FSLDIR/bin/flirt -in $cfile -ref $sbet -dof $DOF -omat $tempdir/low2high.mat -init $tempdir/low2high1.mat -schedule $flirtsch -out $tempdir/low2high $weigthinstr
    else
	#as we have a structural image in perfusion space use it to improve registration
	echo "Using structral image in perfusion space ($lowstruc)"
	#Step1: 3DOF translation only transformation perfusion->lowstruc
	$FSLDIR/bin/flirt -in $cfile -ref $lowstruc -schedule $FSLDIR/etc/flirtsch/xyztrans.sch -omat $tempdir/low2low1.mat $inittext $weigthinstr
	#Step2: 6DOF limited transformation in perfusion space
	$FSLDIR/bin/flirt -in $cfile -ref $lowstruc -dof $DOF -schedule $flirtsch -init $tempdir/low2low1.mat -omat $tempdir/low2low.mat $weigthinstr
	#step3: 6DOF transformation of lowstruc to struc
	$FSLDIR/bin/flirt -in $lowstruc -ref $sbet -omat $tempdir/str2str.mat
	#step4: combine the two transformations
	$FSLDIR/bin/convert_xfm -omat $tempdir/low2high.mat -concat $tempdir/str2str.mat $tempdir/low2low.mat
    fi
    # update the init text ready for the 'final' step to start with the result of the MAIN registration
    epi_inittext="--init=$tempdir/low2high.mat"
    #OUTPUT from MAIN registration
    cp $tempdir/low2high.mat $outdir/asl2struct.mat
fi


# do the FINAL registration run using BBR - this ONLY makes sense when the input is a perfusion image (or something with decent tissue contrast)
if [ -z $mainonly ]; then
echo "Registration FINAL stage (BBR)"
    if [ -z $tissseg ]; then
	# Running FAST segmentation
	$FSLDIR/bin/fast -o $tempdir/struct_fast $sbet
	# WM segmentation
	$FSLDIR/bin/fslmaths $tempdir/struct_fast_pve_2 -thr 0.5 -bin ${tempdir}/fast_tissseg
	tissseg=${tempdir}/fast_tissseg
    fi

    # brain extract the perfsion image - using supplied mask or mask derived from the strctural BET
    if [ -z $mask ]; then
	convert_xfm -omat $tempdir/high2low.mat -inverse $tempdir/low2high.mat

	fslmaths $sbet -thr 0 -bin $tempdir/struct_brain_mask
	${FSLDIR}/bin/flirt -in $tempdir/struct_brain_mask -ref $infile -applyxfm -init $tempdir/high2low.mat -out $tempdir/mask -interp trilinear
	${FSLDIR}/bin/fslmaths $tempdir/mask -thr 0.25 -bin -fillh $tempdir/mask
	${FSLDIR}/bin/fslcpgeom $infile $tempdir/mask
	mask=$tempdir/mask
    fi
    #  apply mask to asldata
    $FSLDIR/bin/fslmaths $infile -mas $mask $tempdir/asldata_brain
    # copy mask to output for future reference
    ${FSLDIR}/bin/imcp $mask $outdir/mask
    
    # do a final refinement of the registration using the perfusion and the white matter segmentation - using epi_reg to get BBR (and allow for fielmap correction in future)
    $FSLDIR/bin/epi_reg --epi=$tempdir/asldata_brain --t1=$struc --t1brain=$sbet $epi_inittext --out=$tempdir/low2high_final --wmseg=$tissseg $weigthinstr
    
    #	$FSLDIR/bin/flirt -ref $sbet -in $infile -dof 6 -cost bbr -wmseg $wmseg -init $tempdir/low2high.mat -omat $tempdir/low2high.mat -out $tempdir/low2high_final -schedule ${FSLDIR}/etc/flirtsch/bbr.sch

    echo "BBR end"

    #OUTPUT
    echo "Saving FINAL output"
    cp $outdir/asl2struct.mat $outdir/asl2struct_init.mat # save the initial transformation matrix to allow chekcing if this part failed
    cp $tempdir/low2high_final.mat $outdir/asl2struct.mat #the transformation matrix from epi_reg - this overwrites the version from MAIN registration
    #$FSLDIR/bin/imcp $tempdir/low2high_final_warp $outdir/asl2struct_warp #the warp from epi_reg
    ${FSLDIR}/bin/imcp $tempdir/low2high_final $outdir/asl2struct # save the transformed image to check on the registration
    
    # copy the edge image from epi_reg output as that is good for visualisation
    ${FSLDIR}/bin/imcp $tissseg $outdir/tissseg
    ${FSLDIR}/bin/imcp $tempdir/low2high_final_fast_wmedge $outdir/tissedge
fi

## ASL-->standard transformation (if specified)
#if [ ! -z $transflag ]; then
#    echo "Combining transformations"
#    convert_xfm -omat $outdir/asl2std.mat -concat $trans $tempdir/low2high.mat 
#fi

#if [ ! -z $lowstrucflag ]; then
# ASL--> low structral transformtaion (if supllied)
#    cp $tempdir/low2low.mat $outdir/asl2lowstruct.mat
#fi

# remove temporary directory
if [ -z $debug ]; then
    echo "Tidying up"
    rm -r $tempdir
fi



echo "ASL_REG - Done."


